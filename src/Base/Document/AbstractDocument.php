<?phpnamespace Nemundo\Core\Base\Document;use Nemundo\Core\Base\AbstractBaseClass;use Nemundo\Core\File\File;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Path\Path;abstract class AbstractDocument extends AbstractBaseClass{    /**     * @var bool     */    public $overwriteExistingFile = false;    /**     * @var bool     */    public $appendToExistingFile = false;    /**     * @var bool     */    public $createDirectory = true;    /**     * @var string     */    protected $filename;    public $path;    /**     * @var bool     */    private $loaded = false;    protected function loadDocument()    {    }    abstract protected function onWrite($fullFilename);    abstract protected function onRender();    public function writeFile($path)    {        if (!$this->loaded) {            $this->loadDocument();            $this->loaded = true;        }        $fullFilename = (new Path($path))            ->addPath($this->filename)            ->getFullFilename();        $file = new File($fullFilename);        if (!$this->overwriteExistingFile && $file->fileExists()) {            if (!$this->appendToExistingFile) {                (new LogMessage())->writeError('File already exists. Filename: ' . $this->filename);                return null;            }        }        if ($this->createDirectory) {            (new Path($file->getPath()))                ->createPath();        }        $this->onWrite($fullFilename);        return $fullFilename;    }    public function getFullFilename()    {        $fullFilename = (new Path($this->path))            ->addPath($this->filename)            ->getFullFilename();        return $fullFilename;    }    public function render()    {        if (!$this->loaded) {            $this->loadDocument();            $this->loaded = true;        }        $this->onRender();    }}