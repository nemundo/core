<?phpnamespace Nemundo\Core\Base;//namespace Document// nach Document???use Nemundo\Core\File\File;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Path\Path;abstract class AbstractDocument extends AbstractBaseClass{    /**     * @var bool     */    public $overwriteExistingFile = false;    /**     * @var bool     */    public $appendToExistingFile = false;    public $createDirectory = false;    /**     * @var string     */    //*public $filename;    /**     * @var string     */    protected $filename;    public $path;    //public function __construct($filename)    /*public function __construct($filename)    {        $this->filename = $filename;    }*/    //abstract function loadDocument();    protected function loadDocument() {    }    abstract protected function onWrite($fullFilename);    abstract protected function onRender();    // writeFile    // write    //abstract public function writeFile($path);    public function writeFile($path) {        $fullFilename = (new Path($path))            ->addPath($this->filename)            ->getFullFilename();        $file = new File($fullFilename);        if (!$this->overwriteExistingFile && $file->fileExists()) {            if (!$this->appendToExistingFile) {                (new LogMessage())->writeError('File already exists. Filename: ' . $this->filename);                return;            }        }        if ($this->createDirectory) {            (new Path($file->getPath()))                ->createPath();        }        $this->onWrite($fullFilename);    }    public function getFullFilename() {        $fullFilename = (new Path($this->path))            ->addPath($this->filename)            ->getFullFilename();        return $fullFilename;    }    public function render()    {        $this->onRender();    }}