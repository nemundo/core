<?phpnamespace Nemundo\Core\Time;use Nemundo\Core\Base\AbstractBase;use Nemundo\Core\Type\Number\Number;class Second extends AbstractBase{    /**     * @var     */    private $second;    public function __construct($second)    {        $this->second = $second;    }    public function getHourMinute()    {        /*$hours = floor($this->second / 3600);        $minutes = floor(($this->second / 60) % 60);*/        $hours = intval($this->second / 3600);        $minutes = (new Number( $this->getMinute()-($hours*60)))->getFormatWithLeadingZero(2);        //$minutes = intval(($this->second / 60) % 60);        $value = $hours . ':' . $minutes;        return $value;    }    public function getMinute()    {        //$minute = (int)round(($this->second / 60));        //$minute = (int)floor(($this->second / 60));        $minute = intval(floor(($this->second / 60)));        return $minute;    }    public function getMinuteSecond()    {        //$minutes = (int)round(($this->second / 60) % 60);        //$minutes = (int)round(($this->second / 60));        $second = $this->second % 60;        $value = $this->getMinute() . ':' . (new Number($second))->getFormatWithLeadingZero(2);        return $value;    }    public function getText()    {        if ($this->getMinute() < 60) {            $value = $this->getMinuteSecond() . ' min';        } else {            $value = $this->getHourMinute() . ' hour';        }        return $value;    }}