<?phpnamespace Nemundo\Core\Xml\Reader;use Nemundo\Core\Base\DataSource\AbstractDataSource;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Http\Response\StatusCode;use Nemundo\Core\WebRequest\CurlWebRequest;class XmlReader extends AbstractXmlReader  // AbstractDataSource{    //public $prefix = '';    public function fromText($xmlText)    {        return parent::fromText($xmlText); // TODO: Change the autogenerated stub    }    public function fromFilename($filename)    {        return parent::fromFilename($filename); // TODO: Change the autogenerated stub    }    public function fromUrl($url)    {        return parent::fromUrl($url); // TODO: Change the autogenerated stub    }    /*public function fromText($xmlText)    {        $simpleXml = simplexml_load_string($xmlText);        //$xml = simplexml_load_string($xmlText, 'SimpleXMLElement', LIBXML_NOCDATA);        //$xml = simplexml_load_file($filename, 'SimpleXMLElement', LIBXML_NOCDATA, $this->prefix, true);        $this->fromSimpleXml($simpleXml);        return $this;    }    public function fromFilename($filename)    {        $simpleXml = simplexml_load_file($filename);  //, $this->prefix, true);        //$xml = simplexml_load_file($filename, 'SimpleXMLElement', LIBXML_NOCDATA, $this->prefix, true);        $this->fromSimpleXml($simpleXml);        return $this;    }    public function fromUrl($url)    {        $request = new CurlWebRequest();        $response =$request->getUrl($url);        if ($response->statusCode == StatusCode::OK) {            $this->fromText($response->html);        } else {            (new Debug())->write($response);        }        return $this;    }    private function fromSimpleXml($simpleXml)    {        $json = json_encode($simpleXml);        $xmlNew = json_decode($json, true);        $this->addItem($xmlNew);    }    protected function loadData()    {    }*/}