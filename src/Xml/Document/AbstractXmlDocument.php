<?phpnamespace Nemundo\Core\Xml\Document;use Nemundo\Core\File\File;use Nemundo\Core\Http\Response\HttpResponse;use Nemundo\Core\Http\Response\ResponseType;use Nemundo\Core\Path\Path;abstract class AbstractXmlDocument extends AbstractXmlItem{    protected $filename;    protected $overwriteExistingFile = false;    /**     * @var bool     */    protected $formatOutput = false;    /**     * @var \DOMDocument     */    private $doc;    abstract protected function loadDocument();    public function __construct()    {        parent::__construct();        $this->loadDocument();    }    private function createElement(XmlItem $item, $document)    {        $domElement = null;        if ($this->namespace == null) {            $domElement = $this->doc->createElement($item->tagName, htmlspecialchars($item->value));        } else {            $domElement = $this->doc->createElementNS($item->namespace, $item->tagName, $item->value);        }        // Attribute hinzufÃ¼gen        foreach ($item->getAttributeList() as $attributeName => $attributeValue) {            $domAttribute = $this->doc->createAttribute($attributeName);            $domAttribute->value = htmlspecialchars($attributeValue);            $domElement->appendChild($domAttribute);        }        $document->appendChild($domElement);        foreach ($item->getData() as $childElement) {            $this->createElement($childElement, $domElement);        }    }    protected function createXml()    {        $this->doc = new \DOMDocument();        $this->doc->formatOutput = $this->formatOutput;        foreach ($this->itemList as $element) {            $this->createElement($element, $this->doc);        }    }    public function getXml()    {        $this->createXml();        return $this->doc->saveXML();    }    public function writeFile($filename)    {        $this->createXml();        $path = (new File($this->filename))->getPath();        if (!(new File($path))->fileExists()) {            (new Path($path))->createPath();        }        $this->doc->save($filename);    }    protected function render()    {        $response = new HttpResponse();        $response->contentType = ResponseType::XML;        $response->content = $this->getXml();    }}