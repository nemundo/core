<?phpnamespace Nemundo\Core\Xml\Document;use Nemundo\Core\File\File;use Nemundo\Core\Http\Response\HttpResponse;use Nemundo\Core\Http\Response\ResponseType;use Nemundo\Core\Path\Path;abstract class AbstractXmlDocument extends AbstractXmlItem{    protected $overwriteExistingFile = false;    /**     * @var bool     */    protected $formatOutput = false;    /**     * @var \DOMDocument     */    private $dom;    abstract protected function loadDocument();    public function __construct()    {        parent::__construct();        $this->loadDocument();    }    private function createElement(AbstractXmlItem $item, $document)    {        $value = '';        if ($item->value !== null) {            if (is_bool($item->value)) {                //$value = (string)$item->value;                if ($item->value) {                    $value = 'true';                } else {                    $value = 'false';                }            } else {                $value = htmlspecialchars($item->value);            }        }        $domElement = null;        if ($item->namespace == null) {            $domElement = $this->dom->createElement($item->tagName, $value);        } else {            $domElement = $this->dom->createElementNS($item->namespace, $item->tagName, $value);        }        foreach ($item->getAttributeList() as $attributeName => $attributeValue) {            $domAttribute = $this->dom->createAttribute($attributeName);            $domAttribute->value = htmlspecialchars($attributeValue);            $domElement->appendChild($domAttribute);        }        $document->appendChild($domElement);        foreach ($item->getData() as $childElement) {            $this->createElement($childElement, $domElement);        }    }    protected function createXml()    {        $this->dom = new \DOMDocument();        $this->dom->formatOutput = true;        //$this->dom->formatOutput = $this->formatOutput;        foreach ($this->itemList as $element) {            $this->createElement($element, $this->dom);        }        //$this->dom->formatOutput = true;  // $this->formatOutput;    }    public function getXml()    {        $this->createXml();        //$this->doc->formatOutput = true;  // $this->formatOutput;        //$this->dom->preserveWhiteSpace = false;        $this->dom->formatOutput = true;        return $this->dom->saveXML();    }    public function writeFile($filename)    {        $this->createXml();        $path = (new File($filename))->getPath();        if (!(new File($path))->fileExists()) {            (new Path($path))->createPath();        }        $this->dom->formatOutput = true;        //$dom->loadXML($strXml);        $this->dom->save($filename);    }    protected function render()    {        $response = new HttpResponse();        $response->contentType = ResponseType::XML;        $response->content = $this->getXml();    }}