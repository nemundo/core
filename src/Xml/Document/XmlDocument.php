<?phpnamespace Nemundo\Core\Xml\Document;use Nemundo\Core\Base\Document\AbstractDocument;use Nemundo\Core\File\File;class XmlDocument extends AbstractXmlDocument // AbstractXmlItem{    public $filename;    public $overwriteExistingFile = false;    /**     * @var bool     */    public $formatOutput = false;    /**     * @var \DOMDocument     */    //private $doc;    /**     * @var XmlItem[]     */   // private $itemList = array();    /*public function addItem(XmlItem $item)    {        $this->itemList[] = $item;    }*/    protected function loadDocument()    {    }  /*  private function createElement(XmlItem $item, $document)    {        //$domElement = $this->doc->createElement($item->tagName, htmlspecialchars($item->value));        $domElement = $this->doc->createElementNS($item->namespace, $item->tagName, $item->value);  //'urn:schemas-etourist:SchemaExtension', 'Pois');        // Attribute hinzufÃ¼gen        foreach ($item->getAttributeList() as $attributeName => $attributeValue) {            $domAttribute = $this->doc->createAttribute($attributeName);            $domAttribute->value = htmlspecialchars($attributeValue);            $domElement->appendChild($domAttribute);        }        $document->appendChild($domElement);        foreach ($item->getData() as $childElement) {            $this->createElement($childElement, $domElement);        }    }    protected function createXml()    {        $this->doc = new \DOMDocument();        $this->doc->formatOutput = $this->formatOutput;        foreach ($this->itemList as $element) {            $this->createElement($element, $this->doc);        }    }    public function getXml()    {        $this->createXml();        return $this->doc->saveXML();    }    public function writeFile($fullFilename)    {        //public function writeFile()        //{        if (!$this->checkProperty('filename')) {            return;        }        $this->createXml();        $path = (new File($this->filename))->getPath();        if (!(new File($path))->fileExists()) {            //    (new Directory($path))->createDirectory();        }        $this->doc->xmlStandalone = true;        $this->doc->save($fullFilename);    }    protected function onRender()    {        $response = new HttpResponse();        $response->contentType = ContentType::XML;        $response->content = $this->getXml();    }*/    public function writeFile($filename)    {        parent::writeFile($filename);    }}