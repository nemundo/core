<?phpnamespace Nemundo\Core\Http\Url;use Nemundo\Core\Base\AbstractBaseClass;abstract class AbstractUrlBuilder extends AbstractBaseClass{    /**     * @var string     */    protected $url;    /**     * @var string[]     */    protected $requestList=[];    function __construct($url = null)    {        $this->setUrl($url);        /*        $this->url = $url;        if ($this->url == null) {            $this->url = $_SERVER['REQUEST_URI'];        }        $parseUrl = parse_url($this->url, PHP_URL_QUERY);        if ($parseUrl !== null) {            parse_str($parseUrl, $this->requestList);        }*/    }    public function setUrl($url) {        $this->url = $url;        if ($this->url === null) {            $this->url = $_SERVER['REQUEST_URI'];        }        if ($this->url !== null) {            $parseUrl = parse_url($this->url, PHP_URL_QUERY);            if ($parseUrl !== null) {                parse_str($parseUrl, $this->requestList);            }        }    }    public function getUrl()    {        $url = strtok($this->url, '?');        if (sizeof($this->requestList) > 0) {            $queryString = http_build_query($this->requestList);            $url = $url . '?' . $queryString;        }        return $url;    }    public function getUrlWithoutEncoding()    {        $url = strtok($this->url, '?');        if (sizeof($this->requestList) > 0) {            $queryString = '';            foreach ($this->requestList as $key => $value) {                $queryString = $queryString . $key . '=' . $value . '&';            }            $url = $url . '?' . $queryString;        }        return $url;    }}