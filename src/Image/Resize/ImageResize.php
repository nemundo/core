<?phpnamespace Nemundo\Core\Image\Resize;use Nemundo\Core\Base\AbstractBaseClass;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\File;use Nemundo\Core\Image\Base\AbstractImageTransformation;use Nemundo\Core\Image\Format\AbstractImageFormat;use Nemundo\Core\Image\Format\AutoSizeImageFormat;use Nemundo\Core\Image\Format\FixHeightImageFormat;use Nemundo\Core\Image\Format\FixWidthImageFormat;use Nemundo\Core\Image\ImageFile;use Nemundo\Core\Log\LogMessage;class ImageResize extends AbstractImageResize{    /**     * @var int     */    public $jpegQuality = 100;    public function resizeImage()    {        if (!$this->checkProperty(array('sourceFilename', 'destinationFilename'))) {            return;        }        if (!$this->checkObject('format', $this->format, AbstractImageFormat::class)) {            exit;        }        $sourceFile = new File($this->sourceFilename);        if (!$sourceFile->fileExists()) {            (new LogMessage())->writeError('Image Resize: File ' . $this->sourceFilename . ' does not exist.');            return;        }        $image = new ImageFile($this->sourceFilename);        if ($image->width == 0 || $image->height == 0) {            (new LogMessage())->writeError('Width Image Dimension is 0');        }        $fileExtension = $image->imageType;        switch ($fileExtension) {            case 'jpg':            case 'jpeg':                $imageSource = \imagecreatefromjpeg($this->sourceFilename);                break;            case 'png':                $imageSource = \imagecreatefrompng($this->sourceFilename);                break;            case 'gif':                $imageSource = \imagecreatefromgif($this->sourceFilename);                break;            default:                (new LogMessage())->writeError('No valid File Extension. Filename: ' . $this->sourceFilename);                return;                break;        }        $dimension=$this->getImageDimension();        $sourceWidth = \imageSX($imageSource);        $sourceHeight = \imageSY($imageSource);        $imageDestination = \imagecreatetruecolor($dimension->width, $dimension->height);        \imagealphablending($imageDestination, false);        \imagesavealpha($imageDestination, true);        $transparent = \imagecolorallocatealpha($imageDestination, 255, 255, 255, 127);        \imagefilledrectangle($imageDestination, 0, 0, $dimension->width, $dimension->height, $transparent);        \imagecopyresampled($imageDestination, $imageSource, 0, 0, 0, 0, $dimension->width, $dimension->height, $sourceWidth, $sourceHeight);        if (\preg_match('/jpg|jpeg/', $fileExtension)) {            \imagejpeg($imageDestination, $this->destinationFilename, $this->jpegQuality);        }        if (\preg_match('/png/', $fileExtension)) {            \imagepng($imageDestination, $this->destinationFilename);        }        if (\preg_match('/gif/', $fileExtension)) {            \imagegif($imageDestination, $this->destinationFilename);        }        \imagedestroy($imageDestination);        \imagedestroy($imageSource);    }}