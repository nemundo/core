<?phpnamespace Nemundo\Core\Image\Cropping;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Image\Base\AbstractImageTransformation;use Nemundo\Core\Image\ImageFile;use Nemundo\Core\Log\LogMessage;class ImageCropping extends AbstractImageTransformation{    /**     * @var CroppingDimension     */    public $croppingDimension;    public function __construct()    {        $this->croppingDimension = new CroppingDimension();    }    public function cropImage()    {        $image = new ImageFile($this->sourceFilename);        if ($image->fileExists()) {            if ($image->width == 0 || $image->height == 0) {                (new LogMessage())->writeError('Width Image Dimension is 0');            } else {                $imageSource = null;                $fileExtension = $image->imageType;                switch ($fileExtension) {                    case 'jpg':                    case 'jpeg':                        $imageSource = \imagecreatefromjpeg($this->sourceFilename);                        break;                    case 'png':                        $imageSource = \imagecreatefrompng($this->sourceFilename);                        break;                }                $croppingImage = \imagecrop($imageSource, ['x' => $this->croppingDimension->x, 'y' => $this->croppingDimension->y, 'width' => $this->croppingDimension->width, 'height' => $this->croppingDimension->height]);                if ($croppingImage !== false) {                    \imagejpeg($croppingImage, $this->destinationFilename);                    \imagedestroy($croppingImage);                }                \imagedestroy($imageSource);            }        } else {            (new Debug())->write('File does not exist. Filename: ' . $this->destinationFilename);        }    }}